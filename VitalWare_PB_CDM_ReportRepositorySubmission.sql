CREATE OR ALTER          PROCEDURE [OH].[40110_VRWRPB_PB_CDM]

AS 
BEGIN 
SET NOCOUNT ON ;

WITH 
 
cteFeeScheduleInfo
/* Pulling Fee Scheduel (FSC) data for the required fee schedules, which are listed in the WHERE clause. */
AS ( SELECT	CLARITY_FSC_PROC.PROC_ID							PROC_ID
			, CAST(CLARITY_FSC_PROC.CONTACT_DATE AS DATE)		CONTACT_DATE
			, CLARITY_FSC_PROC.FEE_SCHEDULE_ID
			, MAX(CLARITY_FSC_PROC.UNIT_CHARGE_AMOUNT)	 		UNIT_CHARGE_AMOUNT
			, MAX(FSC_PRC_CHNG.CONTACT_COMMENT			)		FEE_SCHEDULE_CONTACT_COMMENT
			, MAX(CLARITY_FSC.IS_ACTIVE					)		IS_ACTIVE_YN
			, MAX(ZC_FEE_SCHED_TYPE.NAME				)		FEE_SCHEDULE_TYPE
			, MAX(CLARITY_FSC_PROC.UNIT_RVU				)		UNIT_RVU
			, MAX(CLARITY_FSC_PROC.BASE_CHARGE_AMOUNT	)		BASE_CHARGE_AMOUNT
			, MAX(CLARITY_FSC_PROC.BASE_RVU				)		BASE_RVU
			, MAX(ZC_ALGORITHM.NAME						)		ALGORITHM
			, MAX(CLARITY_FSC_PROC.INTERVAL_LENGTH		)		INTERVAL_LENGTH
			, MAX(ZC_INTERVAL_METHOD.NAME				)		INTERVAL_METHOD
			, MAX(ZC_ROUNDING_METHOD.NAME				)		ROUNDING_METHOD
							

FROM	CLARITY_FSC_PROC
		INNER JOIN 
			(SELECT CLARITY_FSC_PROC.PROC_ID						PROC_ID
			, MAX(CLARITY_FSC_PROC.CONTACT_DATE_REAL   )	MAX_CONTACT_DATE_REAL
			, CLARITY_FSC_PROC.FEE_SCHEDULE_ID	   
			FROM CLARITY_FSC_PROC
			GROUP BY	CLARITY_FSC_PROC.PROC_ID
						, CLARITY_FSC_PROC.FEE_SCHEDULE_ID
			)
			MAX_INFO
			ON CLARITY_FSC_PROC.PROC_ID = MAX_INFO.PROC_ID 
			AND CLARITY_FSC_PROC.CONTACT_DATE_REAL = MAX_INFO.MAX_CONTACT_DATE_REAL
			AND CLARITY_FSC_PROC.FEE_SCHEDULE_ID = MAX_INFO.FEE_SCHEDULE_ID
		LEFT JOIN 
				CLARITY_FSC
				ON CLARITY_FSC_PROC.FEE_SCHEDULE_ID = CLARITY_FSC.FEE_SCHEDULE_ID
			LEFT JOIN 
				ZC_FEE_SCHED_TYPE
				ON CLARITY_FSC.FEE_SCHED_TYPE_C = ZC_FEE_SCHED_TYPE.FEE_SCHED_TYPE_C
			LEFT JOIN 
				ZC_ALGORITHM
				ON CLARITY_FSC_PROC.ALGORITHM_C = ZC_ALGORITHM.ALGORITHM_C
			LEFT JOIN 
				ZC_INTERVAL_METHOD
				ON CLARITY_FSC_PROC.INTERVAL_METHOD_C = ZC_INTERVAL_METHOD.INTERVAL_METHOD_C
			LEFT JOIN 
				ZC_ROUNDING_METHOD
				ON CLARITY_FSC_PROC.ROUNDING_METHOD_C = ZC_ROUNDING_METHOD.ROUNDING_METHOD_C
			LEFT JOIN 
				ZC_TIERED_PRC_RATE
				ON CLARITY_FSC_PROC.TIERED_PRC_RATE_C = ZC_TIERED_PRC_RATE.TIERED_PRC_RATE_C
			LEFT JOIN 
				ZC_TIERED_PRC_METH
				ON CLARITY_FSC_PROC.TIERED_PRC_METHOD_C = ZC_TIERED_PRC_METH.TIERED_PRC_METH_C
			LEFT JOIN 
				ZC_TIERED_PRC_RATE ZC_TIERED_UNIT_RATE
				ON CLARITY_FSC_PROC.TIERED_UNIT_RATE_C = ZC_TIERED_UNIT_RATE.TIERED_PRC_RATE_C
			LEFT JOIN 
				FSC_PRC_CHNG
				ON CLARITY_FSC_PROC.FEE_SCHEDULE_ID = FSC_PRC_CHNG.FEE_SCHEDULE_ID
				AND CLARITY_FSC_PROC.CONTACT_DATE_REAL = FSC_PRC_CHNG.CONTACT_DATE_REAL

/* This list of Fee Schedules will need to be updated for your organization's fee schedules */
	
WHERE	CLARITY_FSC_PROC.FEE_SCHEDULE_ID IN ('20800001', '245')
	
GROUP BY CLARITY_FSC_PROC.PROC_ID						
			, CLARITY_FSC_PROC.CONTACT_DATE
			, CLARITY_FSC_PROC.FEE_SCHEDULE_ID
	)	
			
,  cteOverTimeInfo
/* Pulling from the most recent contact for each procedure record (EAP) */
AS (SELECT		CLARITY_EAP_OT.PROC_ID
				, ZC_CONTACT_TYPE.NAME			CONTACT_TYPE
				, CLARITY_EAP_OT.CONTACT_DATE
				, CLARITY_EAP_OT.CONTACT_COMMENT
				, ZC_CODE_TYPE.NAME				CODE_TYPE_NAME
				, CLARITY_EAP_OT.SHOW_HCPCS_YN
				, CLARITY_EAP_OT.CPT_CODE
				, CLARITY_EAP_OT.ORDERABLE_YN
				, CLARITY_EAP_OT.PERFORMABLE_YN
				, CLARITY_EAP_OT.CHARGEABLE_YN
				, CLARITY_EAP_OT.NAME_HISTORY
				, CLARITY_EAP_OT.RVU_WORK_COMPON				RVU_WORK_NO_MOD
				, CLARITY_EAP_OT.RVU_OVERHD_COMPON				RVU_OVERHD_NO_MOD
				, CLARITY_EAP_OT.RVU_MALPRAC_COMPON				RVU_MALPRAC_NO_MOD
				, CLARITY_EAP_OT.RVU_OVERHEAD_FAC				RVU_OVERHEAD_FAC_NO_MOD
	FROM CLARITY_EAP_OT
	INNER JOIN 
		(	SELECT		CLARITY_EAP_OT.PROC_ID
						, MAX ( CLARITY_EAP_OT.CONTACT_DATE_REAL)			CONTACT_DATE_REAL
			FROM 		CLARITY_EAP_OT
			GROUP BY	CLARITY_EAP_OT.PROC_ID)
		T
		ON T.CONTACT_DATE_REAL = CLARITY_EAP_OT.CONTACT_DATE_REAL
		AND T.PROC_ID = CLARITY_EAP_OT.PROC_ID
	LEFT JOIN 
		ZC_CODE_TYPE
		ON CLARITY_EAP_OT.CODE_TYPE_C = ZC_CODE_TYPE.CODE_TYPE_C
	LEFT JOIN 
		ZC_CONTACT_TYPE
		ON CLARITY_EAP_OT.CONTACT_TYPE_C = ZC_CONTACT_TYPE.CONTACT_TYPE_C
	)

, cteMaxEffDates 
/* Pulling Effective Dates from the most recent contact for each procedure record (EAP) */
AS (SELECT		PROC_ID
				, MAX(LINE)				LINE
				, MAX(EFF_FROM_DATE)	EFF_FROM_DATE
				, MAX(EFF_TO_DATE)		EFF_TO_DATE
	FROM		CLARITY_EAP_EFF_DT
	GROUP BY	PROC_ID
	)

, cteLastPanel 
/* Pulling Panel Charge from the most recent contact for each procedure record (EAP) */
AS (
SELECT		CLARITY_EAP_COMP.PROC_ID
			, MAX(CLARITY_EAP_COMP.CONTACT_DATE_REAL)	CONTACT_DATE_REAL
FROM		CLARITY_EAP_COMP
GROUP BY	CLARITY_EAP_COMP.PROC_ID
)

, cteLastLinkedChargeable 
/* Pulling Linked Chargeables from the most recent contact for each procedure record (EAP) */
AS (
SELECT		LINKED_CHARGEABLES.PROC_ID
			, MAX(LINKED_CHARGEABLES.CONTACT_DATE_REAL) CONTACT_DATE
FROM		LINKED_CHARGEABLES
GROUP BY	LINKED_CHARGEABLES.PROC_ID 
)

, cteLastRvuMod
/* Pulling RVU contact from the most recent contact for each procedure record (EAP) */
AS(
SELECT		PROC_ID
			, MAX(CONTACT_DATE_REAL) CONTACT_DATE_REAL
							
FROM		EAP_RVU_PER_MOD
GROUP BY	PROC_ID
)

/*********************************************** MAIN QUERY ************************************************/
SELECT 	
			   CLARITY_EAP.PROC_ID 											PROCEDURE_ID
			, COALESCE(ZC_DEL_STATUS.NAME	, '')							RECORD_STATUS
			, CLARITY_EAP.PROC_NAME											PROCEDURE_NAME
			, cteOverTimeInfo.NAME_HISTORY									NAME_HISTORY
			, cteOverTimeInfo.CONTACT_TYPE									CONTACT_TYPE
			, CAST(cteOverTimeInfo.CONTACT_DATE AS DATE)					CONTACT_DATE
			, cteOverTimeInfo.CONTACT_COMMENT								CONTACT_COMMENT
			, CASE 
				WHEN CLARITY_EAP.IS_ACTIVE_YN = 'Y'
					THEN 'Active' 
				 WHEN CLARITY_EAP.IS_ACTIVE_YN = 'N'
					THEN 'Inactive' 
				 ELSE '' END												BILLING_STATUS
			, CLARITY_EAP.PROC_CODE											PROCEDURE_MASTER_NUMBER
			, CLARITY_EAP.SHORT_NAME										SHORT_NAME
			, COALESCE( CLARITY_EAP.BILL_DESC, '')							BILLING_DESCRIPTION
			, ISNULL(CONVERT(VARCHAR(10)
				, cteOverTimeInfo.RVU_WORK_NO_MOD	, 120),'')				RVU_WORK_NO_MOD
			, ISNULL(CONVERT(VARCHAR(10)
				, cteOverTimeInfo.RVU_OVERHD_NO_MOD	, 120),'')				RVU_OVERHD_NO_MOD
			, ISNULL(CONVERT(VARCHAR(10)
				, cteOverTimeInfo.RVU_MALPRAC_NO_MOD, 120),'')				RVU_MALPRAC_NO_MOD
			, CASE 
				WHEN cteOverTimeInfo.CODE_TYPE_NAME = 'ASA'
					THEN cteOverTimeInfo.CPT_CODE
				ELSE '' END 												ASA_CODE
			
			, CAST(STUFF(
					(SELECT		',' + CAST(EAP_RVU_PER_MOD.RVU_PER_MOD AS VARCHAR)

					FROM		EAP_RVU_PER_MOD
								LEFT JOIN 
									CLARITY_EAP
									ON EAP_RVU_PER_MOD.PROC_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastRvuMod.PROC_ID = EAP_RVU_PER_MOD.PROC_ID
								AND EAP_RVU_PER_MOD.CONTACT_DATE_REAL = cteLastRvuMod.CONTACT_DATE_REAL
					ORDER BY	EAP_RVU_PER_MOD.LINE
					FOR XML PATH('')
					), 1, 1, '') AS VARCHAR(8000))											RVU_PER_MOD
			, CAST(STUFF(
					(SELECT		',' + CAST(EAP_RVU_PER_MOD.RVU_PER_MOD_WORK AS VARCHAR)
					FROM		EAP_RVU_PER_MOD
								LEFT JOIN 
									CLARITY_EAP
									ON EAP_RVU_PER_MOD.PROC_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastRvuMod.PROC_ID = EAP_RVU_PER_MOD.PROC_ID
								AND EAP_RVU_PER_MOD.CONTACT_DATE_REAL = cteLastRvuMod.CONTACT_DATE_REAL
					ORDER BY	EAP_RVU_PER_MOD.LINE
					FOR XML PATH('') 
					), 1, 1, '')	 AS VARCHAR(8000))											RVU_PER_MOD_WORK
			, CAST(STUFF(
					(SELECT		',' + CAST(EAP_RVU_PER_MOD.RVU_PER_MOD_OVERHD AS VARCHAR)
					FROM		EAP_RVU_PER_MOD
								LEFT JOIN 
									CLARITY_EAP
									ON EAP_RVU_PER_MOD.PROC_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastRvuMod.PROC_ID = EAP_RVU_PER_MOD.PROC_ID
								AND EAP_RVU_PER_MOD.CONTACT_DATE_REAL = cteLastRvuMod.CONTACT_DATE_REAL
					ORDER BY	EAP_RVU_PER_MOD.LINE
					FOR XML PATH('')
					), 1, 1, '')	 AS VARCHAR(8000))											RVU_PER_MOD_OVERHD
			, CAST( STUFF(
					(SELECT		',' + CAST(EAP_RVU_PER_MOD.RVU_PER_MOD_MALPRAC AS VARCHAR)
					FROM		EAP_RVU_PER_MOD
								LEFT JOIN 
									CLARITY_EAP
									ON EAP_RVU_PER_MOD.PROC_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastRvuMod.PROC_ID = EAP_RVU_PER_MOD.PROC_ID
								AND EAP_RVU_PER_MOD.CONTACT_DATE_REAL = cteLastRvuMod.CONTACT_DATE_REAL
					ORDER BY	EAP_RVU_PER_MOD.LINE
					FOR XML PATH('')
					), 1, 1, '')	 AS VARCHAR(8000))											RVU_PER_MOD_MALPRAC
			, CAST(STUFF(
					(SELECT		',' + CAST(EAP_RVU_PER_MOD.RVU_TTL_NON_FAC AS VARCHAR)
					FROM		EAP_RVU_PER_MOD
								LEFT JOIN 
									CLARITY_EAP
									ON EAP_RVU_PER_MOD.PROC_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastRvuMod.PROC_ID = EAP_RVU_PER_MOD.PROC_ID
								AND EAP_RVU_PER_MOD.CONTACT_DATE_REAL = cteLastRvuMod.CONTACT_DATE_REAL
					ORDER BY	EAP_RVU_PER_MOD.LINE
					FOR XML PATH('')  
					), 1, 1, '')	AS VARCHAR(8000))											RVU_TTL_NON_FAC
			, CAST(STUFF(
					(SELECT		',' + CAST(EAP_RVU_PER_MOD.RVU_TTL_FAC AS VARCHAR)
					FROM		EAP_RVU_PER_MOD
								LEFT JOIN 
									CLARITY_EAP
									ON EAP_RVU_PER_MOD.PROC_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastRvuMod.PROC_ID = EAP_RVU_PER_MOD.PROC_ID
								AND EAP_RVU_PER_MOD.CONTACT_DATE_REAL = cteLastRvuMod.CONTACT_DATE_REAL
					ORDER BY	EAP_RVU_PER_MOD.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											RVU_TTL_FAC
			,CAST(STUFF(
					(SELECT		',' + CAST(EAP_RVU_PER_MOD.RVU_PER_MOD_FAC AS VARCHAR)
					FROM		EAP_RVU_PER_MOD
								LEFT JOIN 
									CLARITY_EAP
									ON EAP_RVU_PER_MOD.PROC_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastRvuMod.PROC_ID = EAP_RVU_PER_MOD.PROC_ID
								AND EAP_RVU_PER_MOD.CONTACT_DATE_REAL = cteLastRvuMod.CONTACT_DATE_REAL
					ORDER BY	EAP_RVU_PER_MOD.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											RVU_PER_MOD_FAC
			, CLARITY_EAP.PROC_CAT_ID										PROCEDURE_CATEGORY_ID
			, EDP_PROC_CAT_INFO.PROC_CAT_NAME								PROCEDURE_CATEGORY_NAME
			, CLARITY_EAP_3.CLINICALLY_ACTIVE_YN							CLINICALLY_ACTIVE
			, ZC_PROCEDURE_TYPE.NAME										PROCEDURE_TYPE
			, ZC_DEBIT_OR_CREDIT.NAME										DEBIT_OR_CREDIT
			, ZC_PANEL.NAME													PANEL
			
			,CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_COMP.PANEL_PROC_ID AS VARCHAR)
					FROM		CLARITY_EAP_COMP
					WHERE		cteLastPanel.PROC_ID = CLARITY_EAP_COMP.PROC_ID
								AND CLARITY_EAP_COMP.CONTACT_DATE_REAL = cteLastPanel.CONTACT_DATE_REAL
					ORDER BY	CLARITY_EAP_COMP.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											PANEL_PROCEDURE_ID
			, CAST(STUFF(
					(SELECT		',' + CAST(PANEL_PROC.PROC_NAME AS VARCHAR)
					FROM		CLARITY_EAP_COMP
								LEFT JOIN 
									CLARITY_EAP PANEL_PROC
									ON CLARITY_EAP_COMP.PANEL_PROC_ID = PANEL_PROC.PROC_ID
					WHERE		cteLastPanel.PROC_ID = CLARITY_EAP_COMP.PROC_ID
								AND CLARITY_EAP_COMP.CONTACT_DATE_REAL = cteLastPanel.CONTACT_DATE_REAL
					ORDER BY	CLARITY_EAP_COMP.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											PANEL_PROCEDURE_NAME
			, COALESCE( CLARITY_EAP_COMP.PNL_PROC_DFLT_MOD	, '')			PANEL_DEFAULT_MODIFIERS
			, COALESCE( CLARITY_EAP.IS_PRICE_OVRD_YN		, '')			ALLOW_PRICE_OVERRIDE
			, COALESCE( CLARITY_EAP.MODIFIER				, '')			DEFAULT_MODIFIERS
			, ISNULL(CONVERT(VARCHAR(10)
				, cteMaxEffDates.EFF_FROM_DATE , 120),'')					EFFECTIVE_FROM_DATE
			, ISNULL(CONVERT(VARCHAR(10)
				, cteMaxEffDates.EFF_TO_DATE , 120),'')						EFFECTIVE_TO_DATE
			, CAST(STUFF(
					(SELECT		',' + CAST(EAP_SYNONYMS.SYNONYMS AS VARCHAR)
					FROM		EAP_SYNONYMS 
					WHERE		CLARITY_EAP.PROC_ID = EAP_SYNONYMS.PROC_ID 
					ORDER BY	EAP_SYNONYMS.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											PROCEDURE_SYNONYMS
			, COALESCE( CL_UB_REV_CODE.REVENUE_CODE		, '')				REVENUE_CODE
			, COALESCE( CL_UB_REV_CODE.REVENUE_CODE_NAME, '')				REVENUE_CODE_DESCRIPTION
			, CASE 
				WHEN cteOverTimeInfo.CODE_TYPE_NAME = 'Custom'	
					THEN ''
				WHEN cteOverTimeInfo.CPT_CODE IS NULL 
					THEN ''
				ELSE cteOverTimeInfo.CPT_CODE END							CPT_CODE
			, COALESCE( cteOverTimeInfo.CODE_TYPE_NAME , '')						CODE_TYPE
			, CASE 
				WHEN cteOverTimeInfo.SHOW_HCPCS_YN IS NULL 
					THEN 'Y'
				ELSE cteOverTimeInfo.SHOW_HCPCS_YN END						SHOW_HCPCS_CODE					
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTCOD.EPM_ALT_IDFR AS VARCHAR)
					FROM		CLARITY_EAP_ALTCOD 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTCOD.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTCOD.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_CPT_PAYOR_IDENTIFIER
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTCOD.PROC_ALT_IDFR AS VARCHAR)
					FROM		CLARITY_EAP_ALTCOD 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTCOD.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTCOD.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALTERNATE_CPT_CODE
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTCOD.EFF_TO_DATE AS VARCHAR)
					FROM		CLARITY_EAP_ALTCOD 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTCOD.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTCOD.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_CPT_EFF_TO_DATE
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTCOD.EFF_FROM_DATE AS VARCHAR)
					FROM		CLARITY_EAP_ALTCOD 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTCOD.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTCOD.LINE
					FOR XML PATH('')
					), 1, 1, '') AS VARCHAR(8000))												ALTERNATE_CPT_FROM_DATE
			
			, ZC_CLM_PROC_TYPE.NAME											CLAIM_PROCEDURE_TYPE	
			
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTREV.EPM_ALT_IDFR AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '') AS VARCHAR(8000))											ALT_REV_PAYOR_IDENTIFIER
			, CAST(STUFF(
					(SELECT		',' + CAST(ZC_ACCT_BASECLS_HA.NAME AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
								LEFT JOIN 
									ZC_ACCT_BASECLS_HA
									ON CLARITY_EAP_ALTREV.BASE_CLASS_C = ZC_ACCT_BASECLS_HA.ACCT_BASECLS_HA_C
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REV_BASE_CLASS
			,CAST(STUFF(
					(SELECT		',' + CAST(CL_UB_REV_CODE.REVENUE_CODE AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
								LEFT JOIN 
									CL_UB_REV_CODE
									ON CLARITY_EAP_ALTREV.REV_CODE_ID = CL_UB_REV_CODE.UB_REV_CODE_ID
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REVENUE_CODE 
			, CAST(STUFF(
					(SELECT		',' + CAST(CL_UB_REV_CODE.REVENUE_CODE_NAME AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
								LEFT JOIN 
									CL_UB_REV_CODE
									ON CLARITY_EAP_ALTREV.REV_CODE_ID = CL_UB_REV_CODE.UB_REV_CODE_ID
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REVENUE_CODE_NAME 
			,CAST( STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTREV.RC_BY_PYR_FROM_DT AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REV_EFF_FROM_DATE 
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTREV.RC_BY_PYR_TO_DT AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REV_EFF_TO_DATE 
			,CAST( STUFF(
					(SELECT		',' + CAST(CLARITY_EAP_ALTREV.RC_BY_DEPT_ID AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REV_DEPARTMENT_ID 	
			,CAST( STUFF(
					(SELECT		',' + CAST(CLARITY_DEP.DEPARTMENT_NAME AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
								LEFT JOIN 
									CLARITY_DEP 
									ON CLARITY_EAP_ALTREV.RC_BY_DEPT_ID = CLARITY_DEP.DEPARTMENT_ID
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')		AS VARCHAR(8000))										ALT_REV_DEPARTMENT_NAME
			,CAST( STUFF(
					(SELECT		',' + CAST(CL_COST_CNTR.COST_CENTER_CODE AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
								LEFT JOIN 
									CL_COST_CNTR 
									ON CLARITY_EAP_ALTREV.RC_BY_COST_CENT_ID = CL_COST_CNTR.COST_CNTR_ID
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REV_COST_CENTER_ID
			,CAST(STUFF(
					(SELECT		',' + CAST(CL_COST_CNTR.COST_CENTER_NAME AS VARCHAR)
					FROM		CLARITY_EAP_ALTREV 
								LEFT JOIN 
									CL_COST_CNTR 
									ON CLARITY_EAP_ALTREV.RC_BY_COST_CENT_ID = CL_COST_CNTR.COST_CNTR_ID
					WHERE		CLARITY_EAP.PROC_ID = CLARITY_EAP_ALTREV.PROC_ID 
					ORDER BY	CLARITY_EAP_ALTREV.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											ALT_REV_COST_CENTER_NAME
			, COALESCE(ZC_BILLING_CAT.NAME		, '')						BILLING_CATEGORY
			, CAST(STUFF(
					(SELECT		',' + CAST(IDENTITY_EAP_ID.IDENTITY_TYPE_ID AS VARCHAR)
					FROM		IDENTITY_EAP_ID 
					WHERE		CLARITY_EAP.PROC_ID = IDENTITY_EAP_ID.PROC_ID 
					ORDER BY	IDENTITY_EAP_ID.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											PROC_ID_MPI_ID_TYPE_NUMERIC
			,CAST( STUFF(
					(SELECT		',' + CAST(IDENTITY_ID_TYPE.ID_TYPE_NAME AS VARCHAR)
					FROM		IDENTITY_EAP_ID 
								LEFT JOIN 	IDENTITY_ID_TYPE 
									ON IDENTITY_EAP_ID.IDENTITY_TYPE_ID = IDENTITY_ID_TYPE.ID_TYPE
					WHERE		CLARITY_EAP.PROC_ID = IDENTITY_EAP_ID.PROC_ID 
					ORDER BY	IDENTITY_EAP_ID.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											PROC_ID_MPI_ID_TYPE_NUMERIC2
			,CAST( STUFF(
					(SELECT		',' + CAST(IDENTITY_EAP_ID.IDENTITY_ID AS VARCHAR)
					FROM		IDENTITY_EAP_ID 
					WHERE		CLARITY_EAP.PROC_ID = IDENTITY_EAP_ID.PROC_ID 
					ORDER BY	IDENTITY_EAP_ID.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											PROC_ID_MPI_ID_TYPE_NUMERIC3
			
			
			, COALESCE( cteOverTimeInfo.ORDERABLE_YN		, '')			ORDERABLE
			, COALESCE( cteOverTimeInfo.PERFORMABLE_YN		, '')			PERFORMABLE
			, COALESCE( cteOverTimeInfo.CHARGEABLE_YN		, '')			CHARGEABLE
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP.PROC_CODE AS VARCHAR)
					FROM		LINKED_CHARGEABLES
								LEFT JOIN 
									CLARITY_EAP
									ON LINKED_CHARGEABLES.LINKED_CHRG_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastLinkedChargeable.PROC_ID = LINKED_CHARGEABLES.PROC_ID
								AND LINKED_CHARGEABLES.CONTACT_DATE_REAL = cteLastLinkedChargeable.CONTACT_DATE
					ORDER BY	LINKED_CHARGEABLES.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											LINKED_CHARGE_ID
			, CAST(STUFF(
					(SELECT		',' + CAST(CLARITY_EAP.PROC_NAME AS VARCHAR)
					FROM		LINKED_CHARGEABLES
								LEFT JOIN 
									CLARITY_EAP
									ON LINKED_CHARGEABLES.LINKED_CHRG_ID = CLARITY_EAP.PROC_ID 
					WHERE		cteLastLinkedChargeable.PROC_ID = LINKED_CHARGEABLES.PROC_ID
								AND LINKED_CHARGEABLES.CONTACT_DATE_REAL = cteLastLinkedChargeable.CONTACT_DATE
					ORDER BY	LINKED_CHARGEABLES.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											LINKED_CHARGE_NAME
			, CAST(STUFF(
					(SELECT		',' + CAST(ZC_CHRG_LINK_TYPE.NAME AS VARCHAR)
					FROM		LINKED_CHARGEABLES
								LEFT JOIN 
									ZC_CHRG_LINK_TYPE
									ON LINKED_CHARGEABLES.CHRG_LINK_TYPE_C = ZC_CHRG_LINK_TYPE.CHRG_LINK_TYPE_C
					WHERE		cteLastLinkedChargeable.PROC_ID = LINKED_CHARGEABLES.PROC_ID
								AND LINKED_CHARGEABLES.CONTACT_DATE_REAL = cteLastLinkedChargeable.CONTACT_DATE
					ORDER BY	LINKED_CHARGEABLES.LINE
					FOR XML PATH('')
					), 1, 1, '')	AS VARCHAR(8000))											LINK_TYPE
			, CAST(STUFF(
					(SELECT		',' + CAST(ZC_CHARGE_TYPE.NAME AS VARCHAR)
					FROM		LINKED_CHARGEABLES
								LEFT JOIN 
									ZC_CHARGE_TYPE
									ON LINKED_CHARGEABLES.CHARGE_TYPE_C = ZC_CHARGE_TYPE.CHARGE_TYPE_C
					WHERE		cteLastLinkedChargeable.PROC_ID = LINKED_CHARGEABLES.PROC_ID
								AND LINKED_CHARGEABLES.CONTACT_DATE_REAL = cteLastLinkedChargeable.CONTACT_DATE
					ORDER BY	LINKED_CHARGEABLES.LINE
					FOR XML PATH('')
					), 1, 1, '') AS VARCHAR(8000))												LINKED_CHARGE_TYPE
			, COALESCE( CLARITY_EAP.RPT_GRP_ONE					, '')			REPORT_GROUP_ONE
			, COALESCE( CLARITY_EAP.RPT_GRP_TWO					, '')			REPORT_GROUP_TWO
			, COALESCE( CLARITY_EAP.RPT_GRP_THREE				, '')			REPORT_GROUP_THREE
			, COALESCE( CLARITY_EAP.RPT_GRP_FOUR				, '')			REPORT_GROUP_FOUR
			, COALESCE( CLARITY_EAP.RPT_GRP_FIVE				, '')			REPORT_GROUP_FIVE
			, COALESCE( CLARITY_EAP.RPT_GRP_SIX					, '')			REPORT_GROUP_SIX
			, COALESCE( CLARITY_EAP.RPT_GRP_SEVEN				, '')			REPORT_GROUP_SEVEN
			, COALESCE( CLARITY_EAP.RPT_GRP_EIGHT				, '')			REPORT_GROUP_EIGHT
			, COALESCE( CLARITY_EAP.RPT_GRP_NINE				, '')			REPORT_GROUP_NINE
			, COALESCE( CLARITY_EAP.RPT_GRP_TEN					, '')			REPORT_GROUP_TEN
			, COALESCE( CLARITY_EAP.RPT_GRP_ELEVEN_C			, '')			REPORT_GROUP_ELEVEN
			, COALESCE( CLARITY_EAP.RPT_GRP_TWELVE_C			, '')			REPORT_GROUP_TWELVE
			, COALESCE( CLARITY_EAP.RPT_GRP_THIRTEEN_C			, '')			REPORT_GROUP_THIRTEEN
			, COALESCE( CLARITY_EAP.RPT_GRP_FOURTEEN_C			, '')			REPORT_GROUP_FOURTEEN
			, COALESCE( CLARITY_EAP.RPT_GRP_FIFTEEN_C			, '')			REPORT_GROUP_FIFTEEN
			, COALESCE( CLARITY_EAP.RPT_GRP_SIXTEEN_C			, '')			REPORT_GROUP_SIXTEEN
			, COALESCE( CLARITY_EAP.RPT_GRP_SEVNTEEN_C			, '')			REPORT_GROUP_SEVENTEEN
			, COALESCE( CLARITY_EAP.RPT_GRP_EIGHTEEN_C			, '')			REPORT_GROUP_EIGHTEEN
			, COALESCE( CLARITY_EAP.RPT_GRP_NINETEEN_C			, '')			REPORT_GROUP_NINETEEN
			, COALESCE( CLARITY_EAP.RPT_GRP_TWENTY_C			, '')			REPORT_GROUP_TWENTY


			/* These columns will need to be replaced by the fee schedules for your organization */
			, FSC_20800001.CONTACT_DATE											PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_CONTACT_DATE
			, FSC_20800001.FEE_SCHEDULE_CONTACT_COMMENT							PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_CONTACT_COMMENT
			, COALESCE( FSC_20800001.UNIT_CHARGE_AMOUNT	, 0 )					PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_PB_DEFAULT_UNIT_CHARGE_AMOUNT
			, COALESCE( FSC_20800001.UNIT_RVU						, 0 )		PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_UNIT_RVU		  
			, COALESCE( FSC_20800001.BASE_CHARGE_AMOUNT				, 0 )		PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_BASE_CHARGE_AMOUNT
			, COALESCE( FSC_20800001.BASE_RVU						, 0 )		PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_BASE_RVU
			, COALESCE( FSC_20800001.ALGORITHM						, '')		PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_ALGORITHM
			, COALESCE( FSC_20800001.INTERVAL_LENGTH					, '')	PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_INTERVAL_LENGTH
			, COALESCE( FSC_20800001.INTERVAL_METHOD					, '')	PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_INTERVAL_METHOD
			, COALESCE( FSC_20800001.ROUNDING_METHOD					, '')	PB_OH_DEFAULT_PRICING_FEE_SCHEDULE_ROUNDING_METHOD
			, FSC_245.CONTACT_DATE												OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_CONTACT_DATE
			, FSC_245.FEE_SCHEDULE_CONTACT_COMMENT								OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_CONTACT_COMMENT
			, COALESCE( FSC_245.UNIT_CHARGE_AMOUNT	, 0 )						OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_PB_DEFAULT_UNIT_CHARGE_AMOUNT
			, COALESCE( FSC_245.UNIT_RVU						, 0 )			OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_UNIT_RVU		  
			, COALESCE( FSC_245.BASE_CHARGE_AMOUNT				, 0 )			OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_BASE_CHARGE_AMOUNT
			, COALESCE( FSC_245.BASE_RVU						, 0 )			OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_BASE_RVU
			, COALESCE( FSC_245.ALGORITHM						, '')			OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_ALGORITHM
			, COALESCE( FSC_245.INTERVAL_LENGTH					, '')			OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_INTERVAL_LENGTH
			, COALESCE( FSC_245.INTERVAL_METHOD					, '')			OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_INTERVAL_METHOD
			, COALESCE( FSC_245.ROUNDING_METHOD					, '')			OH_PB_TRAVEL_MEDICINE_FEE_SCHEDULE_ROUNDING_METHOD
			, ISNULL(CONVERT(VARCHAR(10)
				, cteOverTimeInfo.RVU_OVERHEAD_FAC_NO_MOD	, 120),'')			RVU_OVERHEAD_FAC_NO_MOD
			
		
FROM 	CLARITY_EAP
		INNER JOIN
			cteOverTimeInfo
			ON CLARITY_EAP.PROC_ID = cteOverTimeInfo.PROC_ID
		INNER JOIN
			CLARITY_EAP_3
			ON CLARITY_EAP.PROC_ID = CLARITY_EAP_3.PROC_ID
		LEFT JOIN
			EDP_PROC_CAT_INFO
			ON CLARITY_EAP.PROC_CAT_ID = EDP_PROC_CAT_INFO.PROC_CAT_ID
		LEFT JOIN
			ZC_PROCEDURE_TYPE
			ON CLARITY_EAP.TYPE_C = ZC_PROCEDURE_TYPE.PROC_TYPE
		LEFT JOIN
			ZC_DEBIT_OR_CREDIT
			ON CLARITY_EAP.DEBIT_OR_CREDIT_C = ZC_DEBIT_OR_CREDIT.DEBIT_OR_CREDIT_C
		LEFT JOIN
			ZC_PANEL
			ON CLARITY_EAP.PANEL_C = ZC_PANEL.PANEL_C
		LEFT JOIN 
			CLARITY_EAP_COMP 
			ON CLARITY_EAP.PROC_ID = CLARITY_EAP_COMP.PROC_ID
		LEFT JOIN
			ZC_CLM_PROC_TYPE
			ON CLARITY_EAP.CLM_PROC_TYPE_C = ZC_CLM_PROC_TYPE.CLM_PROC_TYPE_C
		LEFT OUTER JOIN 
			CL_UB_REV_CODE
			ON CLARITY_EAP.UB_REV_CODE_ID = CL_UB_REV_CODE.UB_REV_CODE_ID
		
		LEFT OUTER JOIN 
			ZC_BILLING_CAT
			ON CLARITY_EAP.BILLING_CAT_C = ZC_BILLING_CAT.BILLING_CAT_C
		LEFT JOIN 
			ZC_DEL_STATUS
			ON CLARITY_EAP.RECORD_STATE_EAP_C = ZC_DEL_STATUS.DEL_STATUS_C
		LEFT JOIN 
			cteMaxEffDates
			ON CLARITY_EAP.PROC_ID = cteMaxEffDates.PROC_ID
		LEFT JOIN 
			cteLastPanel
			ON CLARITY_EAP.PROC_ID = cteLastPanel.PROC_ID
		LEFT JOIN 
			cteLastRvuMod
			ON CLARITY_EAP.PROC_ID = cteLastRvuMod.PROC_ID
		LEFT JOIN 
			cteLastLinkedChargeable
			ON CLARITY_EAP.PROC_ID = cteLastLinkedChargeable.PROC_ID
		LEFT JOIN 
			cteFeeScheduleInfo FSC_20800001
			ON CLARITY_EAP.PROC_ID = FSC_20800001.PROC_ID 
			AND FSC_20800001.FEE_SCHEDULE_ID = '20800001'
		LEFT JOIN 
			cteFeeScheduleInfo FSC_245
			ON CLARITY_EAP.PROC_ID = FSC_245.PROC_ID 
			AND FSC_245.FEE_SCHEDULE_ID = '245'
		
		
/* These criteria will need to be updated by the logic for your organization */
WHERE 	CLARITY_EAP.TYPE_C = 1 								-- CHARGES ONLY
		AND CLARITY_EAP.CLM_PROC_TYPE_C = 1					-- PB ONLY
		AND (CLARITY_EAP.RECORD_STATE_EAP_C = 1				-- ACTIVE CHARGES ONLY
			OR CLARITY_EAP.RECORD_STATE_EAP_C IS NULL) 
		AND CLARITY_EAP.PROC_NAME NOT LIKE 'OH CHG%'		
		AND CLARITY_EAP.PROC_NAME NOT LIKE 'OH PR%'
		AND CLARITY_EAP.PROC_CAT_ID <> 0 
		

; END
		
